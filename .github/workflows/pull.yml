name: Scheduled workflow

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1"

permissions:
  contents: read

env:
  TAG: latex-container

jobs:
  get-image:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: checkout code
        uses: actions/checkout@v3.2.0
      - name: setup docker
        uses: docker/setup-buildx-action@v2.2.1
      - name: docker pull
        run: |
          make get-image
      - name: latex build semi-sample
        run: |
          rm -f sample/semi-sample/*.pdf
          make run-sample
          make docker-stop
          if [ $(cat sample/semi-sample/semi.log | grep -c "No pages of output") -ne 0 ]; then
            cat sample/semi-sample/semi.log
            exit 1
          fi

      - name: latex build master-theme-midterm
        run: |
          rm -f sample/master-theme-midterm/*.pdf
          make run f=sample/master-theme-midterm/main.tex
          make docker-stop
          if [ $(cat sample/master-theme-midterm/main.log | grep -c "No pages of output") -ne 0 ]; then
            cat sample/master-theme-midterm/main.log
            exit 1
          fi

      - name: latex build graduation-thesis
        run: |
          rm -f sample/graduation-thesis/*.pdf
          make run f=sample/graduation-thesis/main.tex
          make docker-stop
          if [ $(cat sample/graduation-thesis/main.log | grep -c "No pages of output") -ne 0 ]; then
            cat sample/graduation-thesis/main.log
            exit 1
          fi

  DockerCacheSave:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Check out repo under workspace
        uses: actions/checkout@v3.2.0
      - name: setup docker
        uses: docker/setup-buildx-action@v2.2.1

      - name: Cache Docker layers
        uses: actions/cache@v3.2.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: docker build
        run: |
          docker buildx build --build-arg TS=${{ github.sha }} --load \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --tag ${{ env.TAG }} . \
          || exit 0
          if [[ $(docker images | grep -c ${{ env.TAG }}) -eq 0 ]]; then
            docker buildx build --build-arg TS=${{ github.sha }} --load \
              --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
              --no-cache --pull \
              --tag ${{ env.TAG }} .
          fi
